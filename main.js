!function(){"use strict";var e="",t=e+"7d328e1563f0877d1419.png",n=e+"ec557dd30fc14a31eb0b.jpg";document.querySelector(".pic"),document.querySelector(".pic__img"),document.querySelector(".pic__title");class s{constructor(e,t){let{data:n,handleCardClick:s}=e;this._name=n.name,this._link=n.link,this._handleCardClick=s,this._templateSelector=t}_getTemplate(){return document.querySelector(this._templateSelector).content.querySelector(".element").cloneNode(!0)}generateCard(){return this._element=this._getTemplate(),this._setEventListeners(),this._element.querySelector(".element__title").textContent=this._name,this._element.querySelector(".element__pic").src=this._link,this._element.querySelector(".element__pic").alt="Photo of ".concat(this._name),this._element}_toggleLike(e){e.target.classList.toggle("element__icon-img_active")}_deleteElement(){this._element.remove(),this._element=null}_setEventListeners(){this._element.querySelector(".element__delete").addEventListener("click",(()=>this._deleteElement())),this._element.querySelector(".element__pic").addEventListener("click",(()=>this._handleCardClick())),this._element.querySelector(".element__icon-img").addEventListener("click",this._toggleLike)}}class i{constructor(e){this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this),this._handleOverlayClickClose=this._handleOverlayClickClose.bind(this),this._closeBtn=this._popupElement.querySelector(".popup__button-closed"),this.close=this.close.bind(this)}open(){this._setEventListeners(),this._popupElement.classList.add("popup_opened")}close(){this._popupElement.classList.remove("popup_opened"),this._removeEventListeners()}_handleEscClose(e){"Escape"===e.key&&this.close()}_handleOverlayClickClose(e){e.target===e.currentTarget&&this.close()}_removeEventListeners(){document.removeEventListener("keydown",this._handleEscClose),this._popupElement.removeEventListener("click",this._handleOverlayClickClose),this._closeBtn.removeEventListener("click",this.close)}_setEventListeners(){document.addEventListener("keydown",this._handleEscClose),this._closeBtn.addEventListener("click",this.close),this._popupElement.addEventListener("click",this._handleOverlayClickClose)}}class o extends i{constructor(e){let{popupSelector:t,formSubmitHandle:n}=e;var s,i;super(t),i=e=>{e.preventDefault(),this._formSubmitHandle(this._getInputValue())},(s="_handleSubmit")in this?Object.defineProperty(this,s,{value:i,enumerable:!0,configurable:!0,writable:!0}):this[s]=i,this._formSubmitHandle=n,this._formElement=this._popupElement.querySelector(".popup__form")}_getInputValue(){const e=[...this._formElement.querySelectorAll(".popup__input")],t={};return e.forEach((e=>{t[e.name]=e.value})),t}_setEventListeners(){this._formElement.addEventListener("submit",this._handleSubmit),super._setEventListeners()}_removeEventListeners(){this._formElement.removeEventListener("submit",this._handleSubmit),super._removeEventListeners()}close(){super.close(),this._formElement.reset()}}class r{constructor(e,t){var n,s;s=()=>!this._inputList.every((e=>e.validity.valid)),(n="_hasInvalidInput")in this?Object.defineProperty(this,n,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[n]=s,this._formElement=e,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass}_showInputError(e){const t=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}toggleButtonState(){if(this._hasInvalidInput())return this._buttonElement.classList.add(this._inactiveButtonClass),void(this._buttonElement.disabled=!0);this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1}_setEventListeners(){this._inputList=[...this._formElement.querySelectorAll(this._inputSelector)],this._buttonElement=this._formElement.querySelector(this._submitButtonSelector),this._inputList.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}const l=document.querySelector(".profile__button-edit"),a=document.querySelector(".profile__button"),c=document.querySelector(".edit__form"),_=c.querySelector(".edit__input_type_name"),u=c.querySelector(".edit__input_type_career"),m=document.querySelector(".add").querySelector(".add__form"),d=(m.querySelector(".add__input_type_title"),m.querySelector(".add__input_type_link"),{inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"});document.querySelector("#image-logo").src=t,document.querySelector("#image-profile").src=n;const p=new r(c,d),h=new r(m,d),E=new class extends i{constructor(e){super(e),this._image=this._popupElement.querySelector(".pic__img"),this._title=this._popupElement.querySelector(".pic__title")}open(e){this._image.src=e.link,this._title.textContent=e.name,this._image.alt="Photo of ".concat(e.name),super.open()}}(".pic"),v=e=>new s({data:e,handleCardClick:()=>{E.open(e)}},".element-template").generateCard(),y=new o({popupSelector:".add",formSubmitHandle:e=>{const t=e.inputTitle,n=e.inputLink,s=v({name:t,link:n});C.addItem(s),y.close()}}),S=new class{constructor(e){let{nameSelector:t,jobSelector:n}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(n)}getUserInfo(){return this._userInfo={name:this._nameElement.textContent,job:this._jobElement.textContent},this._userInfo}setUserInfo(e,t){this._nameElement.textContent=e,this._jobElement.textContent=t}}({nameSelector:".profile__info-name",jobSelector:".profile__info-career"}),b=new o({popupSelector:".edit",formSubmitHandle:e=>{const t={name:e.inputName,job:e.inputCareer};S.setUserInfo(t.name,t.job),b.close()}}),C=new class{constructor(e,t){let{items:n,renderer:s}=e;this._items=n,this._renderer=s,this._container=document.querySelector(t)}addItem(e){this._container.prepend(e)}renderItem(){this._items.forEach((e=>{this._renderer(e)}))}}({items:[{name:"Yoesmite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg"},{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{name:"Bald moutains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg"}],renderer:e=>{const t=v(e);C.addItem(t)}},".elements");C.renderItem(),l.addEventListener("click",(()=>{b.open();const{name:e,job:t}=S.getUserInfo();_.value=e,u.value=t})),a.addEventListener("click",(()=>{y.open(),h.toggleButtonState()})),p.enableValidation(),h.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,